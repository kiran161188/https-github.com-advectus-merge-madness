# # Create a Feature Branch from Develop
####Require for locking/unlocking 
require "net/http"
require "uri"

# #### Usage:
#   path/to/ruby create_new_feature_from_develop.rb absolute_path_to_git_checkout new_Feature_branchname
abort "usage: ruby create_new_feature_from_develop.rb absolute_path_to_git_checkout feature_branch" if ARGV.length < 2
# @param     {String}   git_checkout   where things live in git
# @param     {String}   branch         the name of the branch to take off develop to do the development by a Team (Branch name Format - BR_<name>)
# @param     {String}   create_date    Is set automatically by system time, used by @date param
@git_checkout = "#{ARGV[0]}"
@new_branch = "#{ARGV[1]}"
@date = Time.now.to_s.split(" ")[0].gsub("-","")
# #### validate params before run through Script
puts "GIT location: #{@git_checkout}"
puts "New branch: #{@new_branch}"
puts "Date: #{@date}"
# Hit enter to proceed or ctrl+c to exit from script after validating the values
proceed = STDIN.gets.chomp
# #### Fetch udpates from remote
system("cd #{@git_checkout} && git fetch")
# #### update develop branch
system("cd #{@git_checkout} && git checkout develop")
system("cd #{@git_checkout} && git pull origin develop")
# #### validate develop branch which need to be up to date with remote
system("cd #{@git_checkout} && git remote show origin")
# Hit enter to procedd or ctrl+c to exit from script
puts "ensure develop is up to date, if not ctrl+c"
proceed = STDIN.gets.chomp
# #### Do Tag While creating a New Feature branch from develop
system("cd #{@git_checkout} && git tag -a TAG_CREATED_#{@new_branch}_#{@date}")
# #### PUSH Tag to remote
system("cd #{@git_checkout} && git push origin TAG_CREATED_#{@new_branch}_#{@date}")
# #### Checking out new Feature Branch
system("cd #{@git_checkout} && git checkout -b #{@new_branch}")
##### Unlocking the branch with hookomator script
def lockpick(state,branch)
  puts "#{state}ing feature :#{branch}"
  uri = URI.parse("http://8080/job/hookomator/buildWithParameters")
  response = Net::HTTP.post_form(uri,{"action"=>"#{state}","branch"=>"#{branch}"})
  puts response
  end
lockpick("unlock",@new_branch)
# #### PUSH Newly created Feature branch to remote
system("cd #{@git_checkout} && git push origin #{@new_branch}")
puts "all done"


